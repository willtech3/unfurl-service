name: Deploy Instagram Unfurl Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  PYTHON_VERSION: "3.12"
  CDK_QUALIFIER: unfurl

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          black --check src/ tests/
          flake8 src/ tests/
          mypy src/
          bandit -r src/

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[cdk]"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda layer
        run: |
          chmod +x scripts/build_lambda_layer.sh
          ./scripts/build_lambda_layer.sh

      - name: Ensure CDK bootstrap stack exists
        run: |
          source .venv/bin/activate
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          STACK_NAME=CDKToolkit
          STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region ${{ env.AWS_REGION }} --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          if [[ "$STATUS" =~ ^(CREATE_COMPLETE|UPDATE_COMPLETE)$ ]]; then
            echo "CDK bootstrap stack already in good state ($STATUS) – continuing."
          elif [[ "$STATUS" == "NOT_FOUND" ]]; then
            echo "CDK bootstrap stack not found – running initial bootstrap."
          else
            echo "::warning::CDK bootstrap stack in status $STATUS – deleting and recreating."
            aws cloudformation delete-stack --stack-name $STACK_NAME --region ${{ env.AWS_REGION }}
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --region ${{ env.AWS_REGION }}
          fi
          cdk bootstrap aws://$ACCOUNT_ID/${{ env.AWS_REGION }} --qualifier ${{ env.CDK_QUALIFIER }} --force --require-approval never

      - name: CDK Synth
        run: |
          source .venv/bin/activate
          cdk synth --qualifier $CDK_QUALIFIER -c bootstrapQualifier=$CDK_QUALIFIER -c "@aws-cdk/core:bootstrapQualifier=$CDK_QUALIFIER" -o cdk.out

      - name: Check synthesized qualifier
        run: |
          echo "Using qualifier: $CDK_QUALIFIER"
          grep -r --line-number "/cdk-bootstrap/" cdk.out || true
          echo "--- End of qualifier check ---"

      - name: Debug bootstrap parameters
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS Account: $ACCOUNT_ID, Region: $AWS_REGION"
          echo "Listing SSM parameters under /cdk-bootstrap/ ..."
          aws ssm get-parameters-by-path --path /cdk-bootstrap/ --region $AWS_REGION --query "Parameters[].Name" || true

      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          cdk deploy --qualifier $CDK_QUALIFIER -c bootstrapQualifier=$CDK_QUALIFIER -c "@aws-cdk/core:bootstrapQualifier=$CDK_QUALIFIER" --all --require-approval never --verbose
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          CDK_QUALIFIER: ${{ env.CDK_QUALIFIER }}
