name: Deploy Instagram Unfurl Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  PYTHON_VERSION: "3.12"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          black --check src/ tests/
          flake8 src/ tests/
          mypy src/
          bandit -r src/

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[cdk]"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda layer
        run: |
          chmod +x scripts/build_lambda_layer.sh
          ./scripts/build_lambda_layer.sh

      - name: Check and Fix CDK Bootstrap
        run: |
          source .venv/bin/activate
          
          # Check if CDKToolkit stack exists and its status
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")
          
          echo "Current CDKToolkit stack status: $STACK_STATUS"
          
          case $STACK_STATUS in
            "CREATE_COMPLETE"|"UPDATE_COMPLETE")
              echo "CDK bootstrap is already complete and healthy"
              ;;
            "DELETE_FAILED"|"CREATE_FAILED"|"UPDATE_FAILED"|"ROLLBACK_COMPLETE"|"ROLLBACK_FAILED")
              echo "CDK bootstrap stack is in failed state ($STACK_STATUS), deleting and recreating..."
              aws cloudformation delete-stack --stack-name CDKToolkit --region ${{ env.AWS_REGION }} || true
              aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region ${{ env.AWS_REGION }} || true
              echo "Running CDK bootstrap..."
              cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
              ;;
            "NOT_FOUND")
              echo "CDK bootstrap stack not found, creating..."
              cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
              ;;
            *)
              echo "CDK bootstrap stack in unexpected state ($STACK_STATUS), attempting bootstrap..."
              cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
              ;;
          esac
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: CDK Synth
        run: |
          source .venv/bin/activate
          cdk synth

      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          cdk deploy --all --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
