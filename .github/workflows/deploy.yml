name: Deploy Instagram Unfurl Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  PYTHON_VERSION: "3.12"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          black --check src/ tests/
          flake8 src/ tests/
          mypy src/
          bandit -r src/

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[cdk]"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda layer
        run: |
          chmod +x scripts/build_lambda_layer.sh
          ./scripts/build_lambda_layer.sh

      - name: Ensure CDK bootstrap stack exists
        run: |
          source .venv/bin/activate
          set -e
          STATUS=$(aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          if [[ "$STATUS" =~ ^(CREATE_COMPLETE|UPDATE_COMPLETE)$ ]]; then
            echo "CDK bootstrap stack already in good state ($STATUS) – skipping bootstrap."
          elif [[ "$STATUS" == "NOT_FOUND" ]]; then
            echo "CDK bootstrap stack not found – running initial bootstrap."
            cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
          elif [[ "$STATUS" =~ ^(DELETE_FAILED|ROLLBACK_COMPLETE|ROLLBACK_FAILED|UPDATE_ROLLBACK_FAILED)$ ]]; then
            echo "CDK bootstrap stack is in a failed state ($STATUS). Attempting automatic repair…"
            # Best-effort cleanup of retained asset bucket
            ASSET_BUCKET="cdk-hnb659fds-assets-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}"
            if aws s3 ls "s3://$ASSET_BUCKET" >/dev/null 2>&1; then
              echo "Emptying asset bucket $ASSET_BUCKET"
              aws s3 rm "s3://$ASSET_BUCKET" --recursive || true
              aws s3 rb  "s3://$ASSET_BUCKET" --force     || true
            fi
            # Best-effort cleanup of container asset ECR repo
            ECR_REPO="cdk-hnb659fds-container-assets-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}"
            if aws ecr describe-repositories --repository-names "$ECR_REPO" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              echo "Deleting ECR repository $ECR_REPO"
              IMAGE_IDS=$(aws ecr list-images --repository-name "$ECR_REPO" --query 'imageIds[*]' --output json --region ${{ env.AWS_REGION }} | jq -c '.')
              if [[ "$IMAGE_IDS" != "[]" ]]; then
                aws ecr batch-delete-image --repository-name "$ECR_REPO" --image-ids "$IMAGE_IDS" --region ${{ env.AWS_REGION }} || true
              fi
              aws ecr delete-repository --repository-name "$ECR_REPO" --force --region ${{ env.AWS_REGION }} || true
            fi
            # Delete the failed stack and wait for completion
            aws cloudformation delete-stack --stack-name CDKToolkit --region ${{ env.AWS_REGION }} || true
            echo "Waiting for CDKToolkit stack deletion to complete (up to 10 minutes)…"
            aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region ${{ env.AWS_REGION }} || true
            echo "Running fresh bootstrap…"
            cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
          else
            echo "CDK bootstrap stack is in unexpected status $STATUS – failing build."
            exit 1
          fi
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: CDK Synth
        run: |
          source .venv/bin/activate
          cdk synth

      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          cdk deploy --all --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
