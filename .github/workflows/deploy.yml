name: Deploy Instagram Unfurl Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  PYTHON_VERSION: "3.12"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          source .venv/bin/activate
          black --check src/ tests/
          flake8 src/ tests/
          mypy src/
          bandit -r src/ -s B110

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[cdk]"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy with CDK
        run: |
          source .venv/bin/activate
          
          # Set environment variables for deployment
          export DEPLOYMENT_MODE=fast
          export DOCKER_BUILDKIT=1
          export BUILDKIT_INLINE_CACHE=1
          export CDK_DEFAULT_REGION=${{ env.AWS_REGION }}
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
          
          echo "üöÄ Deploying Instagram unfurl service..."
          echo "üìã Using single optimized deployment mode"
          echo "üìç Region: ${{ env.AWS_REGION }}"
          echo "üîß Qualifier: default"
          
          # Get AWS account for context
          AWS_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          echo "üè¢ AWS Account: $AWS_ACCOUNT"
          
          # Skip bootstrap - environment already bootstrapped
          # cdk bootstrap aws://$AWS_ACCOUNT/${{ env.AWS_REGION }} --qualifier ${{ env.CDK_QUALIFIER }} --require-approval never
          
          # Deploy the stack (with explicit environment context)
          cdk deploy --all --require-approval never \
            -c "env=${{ env.AWS_REGION }}" \
            -c "account=$AWS_ACCOUNT" \
            -c "region=${{ env.AWS_REGION }}"
