# Windsurf Rules for Python 3.12.3 Application

## Project Overview
This is a Python 3.12.3 application that follows modern Python development practices with strict code quality standards and uses UV for fast package and virtual environment management.

## Development Environment Setup

### UV Package Manager Installation
- **Required Tool**: UV (Ultra-fast Python package installer and resolver)
- Install UV: `curl -LsSf https://astral.sh/uv/install.sh | sh` (Linux/Mac) or `powershell -c "irm https://astral.sh/uv/install.ps1 | iex"` (Windows)
- Verify installation: `uv --version`
- UV replaces both pip and venv for faster, more reliable package management

## Code Quality Tools Configuration

### Python Version
- **Target Version**: Python 3.12.3
- Always ensure compatibility with Python 3.12.3 features and syntax
- Use modern Python features like match statements, improved error messages, and performance enhancements

### Code Formatting - Black
- **Tool**: black
- All Python code MUST be formatted using black with default settings
- Line length: 88 characters (black default)
- Before committing any code changes, run: `black .`
- Configuration should be in `pyproject.toml`:
  ```toml
  [tool.black]
  line-length = 88
  target-version = ['py312']
  ```

### Linting - Flake8
- **Tool**: flake8
- All code must pass flake8 checks without warnings or errors
- Configuration in `.flake8` or `setup.cfg`:
  ```ini
  [flake8]
  max-line-length = 88
  extend-ignore = E203, W503
  exclude = .git,__pycache__,build,dist,.venv
  ```
- Run before committing: `flake8 .`

### Type Checking - MyPy
- **Tool**: mypy
- All code must include proper type hints and pass mypy checks
- Use strict mode for better type safety
- Configuration in `pyproject.toml`:
  ```toml
  [tool.mypy]
  python_version = "3.12"
  strict = true
  warn_return_any = true
  warn_unused_configs = true
  disallow_untyped_defs = true
  ```
- Run before committing: `mypy .`

### Testing - Pytest
- **Tool**: pytest
- All new features must include comprehensive unit tests
- Aim for high test coverage (minimum 80%)
- Use descriptive test names and follow AAA pattern (Arrange, Act, Assert)
- Configuration in `pyproject.toml`:
  ```toml
  [tool.pytest.ini_options]
  testpaths = ["tests"]
  python_files = ["test_*.py", "*_test.py"]
  addopts = "-v --tb=short --strict-markers"
  ```
- Run tests: `pytest` or `pytest -v` for verbose output

## Development Rules and Standards

### Code Changes and Explanations
**CRITICAL REQUIREMENT**: Every single code change, no matter how small, MUST be accompanied by a clear, detailed explanation that includes:

1. **What**: Describe exactly what was changed
2. **Why**: Explain the reasoning behind the change
3. **How**: Detail the approach or method used
4. **Impact**: Describe any potential side effects or implications
5. **Testing**: Mention how the change was tested or validated

Example format for explanations:
```
CHANGE EXPLANATION:
- What: Added input validation to user_login() function
- Why: Prevent SQL injection attacks and improve security
- How: Implemented parameterized queries and input sanitization
- Impact: Slightly slower performance but significantly improved security
- Testing: Added unit tests for edge cases and security scenarios
```

### Command Execution and Explanations
**CRITICAL REQUIREMENT**: Every command executed (terminal commands, scripts, CLI tools) MUST be accompanied by a clear explanation that includes:

1. **Command**: The exact command being run
2. **Purpose**: Why this command is necessary
3. **Context**: When and where to run it
4. **Expected Output**: What should happen when it runs successfully
5. **Potential Issues**: Common problems and how to resolve them

Example format for command explanations:
```
COMMAND EXPLANATION:
- Command: uv pip install -r requirements-dev.txt
- Purpose: Install all development dependencies for the project using UV package manager
- Context: Run in project root directory with UV virtual environment activated
- Expected Output: Successfully installed packages with no errors, significantly faster than pip
- Potential Issues: May fail if UV not installed or if virtual environment not activated
```

**Examples of commands that MUST be explained:**
- Package installations: `uv add package_name`, `uv pip install package_name`
- Virtual environment: `uv venv`, `source .venv/bin/activate`
- Quality checks: `black .`, `flake8 .`, `mypy .`, `pytest`
- Git operations: `git commit`, `git push`, `git merge`
- Environment setup: `uv venv .venv`, `uv pip install -r requirements.txt`
- Build/deployment: `uv pip install -e .`, deployment scripts
- Database operations: migrations, schema updates
- Any custom scripts or automation tools

### File Structure and Organization
- Follow standard Python package structure
- Use meaningful module and package names
- Keep `__init__.py` files clean and well-documented
- Separate concerns: models, views, controllers, utilities
- Use absolute imports over relative imports when possible

### Documentation Standards
- Every function and class must have proper docstrings (Google or NumPy style)
- Include type hints for all function parameters and return values
- README.md must be kept up-to-date with setup and usage instructions
- Use inline comments sparingly and only when code logic is complex

### Error Handling
- Use specific exception types rather than generic Exception
- Implement proper logging using Python's logging module
- Follow the "ask for forgiveness, not permission" (EAFP) principle
- Handle edge cases explicitly

### Dependencies Management - UV Package Manager
- **Package Manager**: UV (fast Python package installer and resolver)
- Use `pyproject.toml` for dependency specification (preferred)
- Alternative: Use `requirements.txt` for production and `requirements-dev.txt` for development
- Virtual environment management handled by UV
- Pin versions for stability: `package==1.2.3`
- Regularly update dependencies and test for compatibility

**UV Commands for dependency management:**
- Install dependencies: `uv pip install -r requirements.txt`
- Add new package: `uv add package_name`
- Remove package: `uv remove package_name`
- Create virtual environment: `uv venv`
- Activate virtual environment: `source .venv/bin/activate` (Linux/Mac) or `.venv\Scripts\activate` (Windows)
- Install project in development mode: `uv pip install -e .`

**Example pyproject.toml with UV:**
```toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "your-project"
version = "0.1.0"
description = "Your project description"
dependencies = [
    "requests>=2.31.0",
    "fastapi>=0.104.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]
```

### Pre-commit Hooks
Set up pre-commit hooks to automatically run quality checks:
```yaml
# .pre-commit-config.yaml
repos:
  - repo: https://github.com/psf/black
    rev: 23.x.x
    hooks:
      - id: black
  - repo: https://github.com/pycqa/flake8
    rev: 6.x.x
    hooks:
      - id: flake8
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.x.x
    hooks:
      - id: mypy
```

### UV Best Practices
- Always use UV for package installation and virtual environment management
- Prefer `pyproject.toml` over `requirements.txt` for modern dependency management
- Use `uv add --dev package_name` for development dependencies
- Lock dependencies with `uv pip freeze > requirements.lock` for reproducible builds
- Use `uv run` to execute commands in the virtual environment context
- Leverage UV's speed advantage for CI/CD pipelines

### Performance Considerations
- Use list comprehensions and generator expressions where appropriate
- Leverage Python 3.12.3 performance improvements
- Profile code when performance is critical
- Use appropriate data structures (sets for membership tests, deques for queues)

### Security Guidelines
- Never commit sensitive information (API keys, passwords, secrets)
- Use environment variables for configuration
- Validate all user inputs
- Follow OWASP security guidelines for web applications

### Git Commit Standards
- Use conventional commit format: `type(scope): description`
- Types: feat, fix, docs, style, refactor, test, chore
- Include the change explanation in the commit body
- Keep commits atomic and focused

## Quality Gates
Before any code is considered complete:

1. ✅ All tests pass (`pytest`)
2. ✅ Code is formatted (`black .`)
3. ✅ No linting errors (`flake8 .`)
4. ✅ Type checking passes (`mypy .`)
5. ✅ All changes are thoroughly explained
6. ✅ Documentation is updated if needed
7. ✅ Test coverage meets minimum threshold

## AI Assistant Instructions
When working on this codebase:
- Always use UV for package management and virtual environment operations
- Run quality checks after making changes using UV environment
- Provide detailed explanations for every modification AND command execution
- Suggest improvements when you see opportunities
- Ask clarifying questions if requirements are ambiguous
- Prioritize code readability and maintainability
- Follow Python PEP 8 style guide principles
- Consider performance implications of changes
- Ensure backward compatibility unless explicitly changing APIs
- Use `uv run` prefix when executing Python commands in virtual environment
- Leverage UV's speed for faster development cycles